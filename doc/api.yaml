openapi: 3.0.3
info:
  title: Simplified login API specification
  description: |-
    This OpenAPI document describes the simplified login API.
    Copy and paste the API from the `paths` key to your OpenAPI document.
  version: "1"
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref: "#/components/schemas/User" }
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
                    
  /session/{Username}:
    parameters:
      - $ref: "#/components/parameters/Username"
    put:
      summary: Set Username
      description: "Sets the username of the user"
      operationId: setMyUserName
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        "404": 
          description: User not found
          
  /session/{Username}/profilePicture:
    parameters:
      - $ref: "#/components/parameters/Username"
    put:
      summary: Set Profile Picture
      description: "Sets the profile picture of the user"
      operationId: setMyPhoto
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
            description: Profile Picture updated successfully
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/User"
        "404": 
          description: User not found
        
  /session/{Username}/myConversations:
    parameters:
      - $ref: "#/components/parameters/Username"
    get:
      summary: get all of my conversations
      description: "Get all the conversations of the user"
      operationId: getMyConversations
      responses:
        "200":
          description: "My conversations fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyConversations"
        "404":
           description: User not found
          
          
          
          
          
components:
  schemas:
    User:
      description: "Object representing a User"
      type: object
      properties:
        Username:
          description: "a unique identifier of the user"
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        Profile Picture:
          description: "the profile picture of the user"
    
    Message:
      description: "Object representing a single message"
      type: object
      properties:
        Sender:
          description: "the user of the person who sent the message"
          $ref: "#/components/schemas/User"
        Content:
          description: "the content of the message"
          type: string
          minLength: 1 #the message has to be at least one character
          maxLength: 2000 #limiting the max message length
        Timestamp:
          description: "the timestamp of the message"
          type: string
          format: date-time
        Status:
          description: "the status of the message"
          type: string
          enum:
            - oneCheckMark
            - doubleCheckMark
            - username
        Reactions:
          description: "all reactions to this message"
          type: array
          items:
            $ref: "#/components/schemas/Reaction" 
          
    Reaction:
      description: "Object representing a reaction to a message"
      type: object
      properties:
        UserWhoReacted:
          description: "the user who made the reaction"
          $ref: "#/components/schemas/User"
        ReactionType:
          description: "the type of reaction, can be either emoji or message"
          type: string
          enum:
            - emoji
            - message
          
    Group:
      description: "Object representing a Group of users"
      type: object
      properties:
        Group ID:
          description: "unique ID for the group"
          type: integer
        Group name:
          description: "name of the group"
          type: string
          example: Acsai Group
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        Group Picture:
          description: "the picture of the group"
    
    Conversation:
      description: "Object representing a conversation"
      type: object
      properties:
        id:
          description: |
            "identifier of a conversation, which is either
            the unique username of the other person or
            the unique Group ID of the group"
          type: integer
        Conversation Type:
          description: "type of conversation, either with a single person or a group"
          type: string
          enum:
            - user
            - group
        Data:
          description: "content of the conversation -> a list of messages"
          type: object
          
    MyConversations:
      description: "Object storing all of my conversations"
      type: array
      items:
        $ref: "#/components/schemas/Conversation"
    
    UserBase:
      description: "Object storing all registered users"
      type: array
      items:
        $ref: "#/components/schemas/User"
    
  parameters:
    Username:
      schema:
        type: string
        example: "abcdef012345"
        readOnly: true
      name: Username
      in: path
      required: true
      description: Unique Username

