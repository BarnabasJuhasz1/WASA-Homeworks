openapi: 3.0.3
info:
  title: WasaText OpenAPI
  description: |-
    This OpenAPI document describes the WasaText API.
    Note: One-on-one conversations are implemented as "Groups" with 2 person.
    To distinguish between group conversations (also 2 people),
    the enum field "Conversation Type" is used.
  version: "1"
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                Username: 
                  type: string
                  description: "a unique identifier of the user"
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
                    pattern: 'ˆ.*?$'
                    
  /user/{Username}:
    parameters:
      - $ref: "#/components/parameters/Username"
    put:
      tags: ["User Management"]
      summary: Set Username
      description: "Sets the username of the user"
      operationId: setMyUserName
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                NewUsername: 
                  type: string
                  description: "a unique identifier of the user"
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        "404": 
          description: User not found
          
  /user/{Username}/profilePicture:
    parameters:
      - $ref: "#/components/parameters/Username"
    put:
      tags: ["User Management"]
      summary: Set Profile Picture
      description: "Sets the profile picture of the user"
      operationId: setMyPhoto
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                ProfilePicture:
                  description: "the profile picture of the user"
                  type: string
                  format: binary
        required: true
      responses:
        "200":
            description: Profile Picture updated successfully
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/User"
        "404": 
          description: User not found
        
  /user/{Username}/myConversations:
    parameters:
      - $ref: "#/components/parameters/Username"
    get:
      tags: ["Conversation Management"]
      summary: get all of my conversations
      description: "Get all the conversations of the user"
      operationId: getMyConversations
      responses:
        "200":
          description: "My conversations were fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyConversations"
        "404":
           description: User not found
          
  /conversation/{ConversationID}:
    parameters:
#      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/ConversationID"
    get:
      tags: ["Conversation Management"]
      summary: get the selected conversation
      description: "Get the selected conversations"
      operationId: getConversation
      responses:
        "200":
          description: "The selected conversation was fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: User or Conversation not found
    post:
      tags: ["Conversation Management"]
      summary: send a message to the conversation
      description: "The user sends a message to the conversation"
      operationId: sendMessage
      requestBody:
        description: "The message to send to the conversation"
        content:
          application/json:
            schema:
              type: object
              properties:
                # SenderUsername: 
                #   type: string
                #   description: "a unique identifier of the user"
                #   example: Maria
                #   pattern: 'ˆ.*?$'
                #   minLength: 3
                #   maxLength: 16
                MessageContent:
                  type: string
                  description: "the content of the message"
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 1
                  maxLength: 10000
        required: true
      responses:
        "200":
          description: "The message to the conversation was sent successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: User or Conversation not found
    put:
      tags: ["Conversation Management"]
      summary: set the group name
      description: "Set the group name"
      operationId: setGroupName
      requestBody:
        description: Group Details
        content:
          application/json:
            schema:
              type: object
              properties:
                GroupName: 
                  type: string
                  description: "new name for the group"
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: Group Details set successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "403":
          description: "Forbidden request, cannot set group name of one-on-one conversation"
        "404":
          description: User or Conversation not found
          
    delete:
      tags: ["Conversation Management"]
      summary: leave group
      description: "Leave from the group"
      operationId: leaveGroup
      responses:
        "200":
          description: Left from the group successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MyConversations"
        "404":
           description: User or Conversation not found
   
  /conversation/{ConversationID}/add:
    parameters:
#      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/ConversationID"
    put:
      tags: ["Conversation Management"]
      summary: Add Someone To Group
      description: "Add the specified user to the group"
      operationId: addToGroup
      requestBody:
        description: User to Add
        content:
          application/json:
            schema:
              type: object
              properties:
                UserNameToAdd: 
                  type: string
                  description: "User to add to the group"
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "200":
          description: User has been added to the Group successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: User or Conversation not found
   
  /message/{MessageID}:
    parameters:
#      - $ref: "#/components/parameters/Username"
#      - $ref: "#/components/parameters/ConversationID"
      - $ref: "#/components/parameters/MessageID"
    delete:
      tags: ["Message Management"]
      summary: delete message
      description: "delete the message from the conversation"
      operationId: deleteMessage
      responses:
        "200":
          description: Message deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: User, Conversation or Message not found
  
  /message/{MessageID}/comment:
    parameters:
#      - $ref: "#/components/parameters/Username"
#      - $ref: "#/components/parameters/ConversationID"
      - $ref: "#/components/parameters/MessageID"
    post:
      tags: ["Message Management"]
      summary: Forward a Message
      description: "Forward the message to someone"
      operationId: forwardMessage
      requestBody:
        description: Forward The Message
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Message"
                - type: object
                  properties:
                    Recipient:
                      description: "The recipient of the message to be forwarded"
                      type: string
                      example: "user123"
                      pattern: 'ˆ.*?$'
                      minLength: 3
                      maxLength: 16
      responses:
        "200":
            description: Message forwarded successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Message"
        "404": 
          description: User, Conversation or Message not found
    put:
      tags: ["Message Management"]
      summary: React to Message
      description: "Send a reaction or comment to a message"
      operationId: commentMessage
      requestBody:
        description: Comment The Message
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reaction"
        required: true
      responses:
        "200":
            description: Message reaction sent successfully
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/Message"
        "404": 
          description: User, Conversation or Message not found
    delete:
      tags: ["Message Management"]
      summary: uncomment message
      description: "delete the comment or reaction from the message"
      operationId: uncommentMessage
      responses:
        "200":
          description: Message reaction deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
           description: User, Conversation or Message not found
  
  
  /conversation/{ConversationID}/groupPicture:
    parameters:
#      - $ref: "#/components/parameters/Username"
      - $ref: "#/components/parameters/ConversationID"
    put:
      tags: ["Conversation Management"]
      summary: set the picture of the group
      description: "Set the picture of the group"
      operationId: setGroupPhoto
      requestBody:
        description: Group Picture
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Conversation"
        required: true
      responses:
        "200":
          description: "The group picture was set successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "403":
          description: "Forbidden request, cannot set picture of one-on-one conversation"
        "404":
           description: "User or Conversation not found"
           
  /conversation/create:
    post:
      tags: ["Conversation Management"]
      summary: create a new conversation
      description: "creates either a one-on-one conversation or a group conversation"
      operationId: createConversation
      requestBody:
        description: Details of conversation to create
        content:
          application/json:
            schema:
              properties:
                ConversationType:
                  description: "type of conversation, either with a single person or a group"
                  type: string
                  enum:
                    - user
                    - group
                  pattern: 'ˆ.*?$'
                  minLength: 1
                  maxLength: 5
                Participants:
                  description: "users to create the conversation with"
                  type: array
                  items: 
                    description: "a list of usernames"
                    type: string
                    example: Maria
                    pattern: 'ˆ.*?$'
                    minLength: 1
                    maxLength: 16
                  minItems: 1
        required: true
      responses:
        "200":
          description: "The conversation was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "403":
           description: "Forbidden request, either you tried to create a one-on-one conversation with more multiple users at the same time, or this one-on-one conversation already exist."
    
components:
  schemas:
    User:
      description: "Object representing a User"
      type: object
      properties:
        Username:
          description: "a unique identifier of the user"
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 1
          maxLength: 16
        Profile Picture:
          description: "the profile picture of the user"
          type: string
          format: binary
            
    Message:
      description: "Object representing a single message"
      type: object
      properties:
        Message ID:
          description: "message id that is unique in the scope of a conversation"
          type: integer
        Sender:
          allOf:
            - $ref: "#/components/schemas/User"
            - description: "the user of the person who sent the message"
        Content:
          description: "the content of the message"
          type: string
          pattern: 'ˆ.*?$'
          minLength: 1 #the message has to be at least one character
          maxLength: 2000 #limiting the max message length
          
        Timestamp:
          description: "the timestamp of the message"
          type: string
          format: date-time
          
        Status:
          description: "the status of the message"
          type: string
          enum:
            - oneCheckMark
            - doubleCheckMark
            - username
          pattern: 'ˆ.*?$'
          minLength: 1
          maxLength: 10000
        Reactions:
          description: "all reactions to this message"
          type: array
          items:
            $ref: "#/components/schemas/Reaction" 
          minItems: 0
          
    Reaction:
      description: "Object representing a reaction to a message"
      type: object
      properties:
        UserWhoReacted:
          allOf:
            - $ref: "#/components/schemas/User"
            - description: "The user who made the reaction"
        ReactionType:
          description: "the type of reaction, can be either emoji or message"
          type: string
          enum:
            - emoji
            - message
          pattern: 'ˆ.*?$'
          minLength: 1
          maxLength: 10000
          
    Group:
      description: "Object representing a Group of users"
      type: object
      properties:
        Group ID:
          description: "unique ID for the group"
          type: integer
        Participants:
          description: "users in the group"
          type: array
          items: 
            $ref: "#/components/schemas/User"
          minItems: 2
        Group name:
          description: "name of the group"
          type: string
          example: Acsai Group
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 20
        Group Picture:
          description: "the picture of the group"
          type: string
          format: binary
          
    Conversation:
      description: "Object representing a conversation"
      type: object
      properties:
        id:
          description: |
            "identifier of a conversation, which is either
            the unique username of the other person or
            the unique Group ID of the group"
          type: string
          pattern: 'ˆ.*?$'
          minLength: 1
          maxLength: 10000
        ConversationGroup:
          allOf:
            - $ref: "#/components/schemas/Group"
            - description: |
                "the group that has this conversation,
                if this is a single one-to-one conversation,
                then the group will only be consisting of two people.
                The group name, picture, and participants returned by backend
                will match the person that the client has a conversation with." 
        ConversationType:
          description: "type of conversation, either with a single person or a group"
          type: string
          enum:
            - user
            - group
          pattern: 'ˆ.*?$'
          minLength: 1
          maxLength: 5
        Messages:
          description: "content of the conversation -> a list of messages"
          type: array
          items: 
            $ref: "#/components/schemas/Message"
          minItems: 1

          
    MyConversations:
      description: "Object storing all of my conversations"
      type: array
      items:
        $ref: "#/components/schemas/Conversation"
      minItems: 0

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
  
  parameters:
    Username:
      schema:
        type: string
        pattern: 'ˆ.*?$'
        minLength: 3
        maxLength: 20
        readOnly: true
      name: Username
      in: path
      required: true
      description: Unique Username
    ConversationID:
      schema:
        type: string
        pattern: 'ˆ.*?$'
        minLength: 1
        maxLength: 10000
        readOnly: true
      name: ConversationID
      in: path
      required: true
      description: Unique ID for a conversation
    MessageID:
      schema:
        type: integer
        readOnly: true
      name: MessageID
      in: path
      required: true
      description: Message ID that is unique in the scope of a conversation
      
security:
  - bearerAuth: []
                      