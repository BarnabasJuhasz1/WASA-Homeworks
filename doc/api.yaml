openapi: 3.0.3
info:
  title: WasaText OpenAPI
  description: |-
    This OpenAPI document describes the WasaText API.
    Note: One-on-one conversations are implemented as "Groups" with 2 person.
    To distinguish between group conversations (also 2 people),
    the enum field "Conversation Type" is used.
  version: "1"
tags:
  - name: "login"
    description: "Operations related to user login"
  - name: "User Management"
    description: "Manage user data such as username and profile picture"
  - name: "Conversation Management"
    description: "Manage conversations and groups"
  - name: "Message Management"
    description: "Operations related to messages in conversations"
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: "User details"
        content:
          application/json:
            schema:
              description: "The Username, which is a unique identifier"
              type: object
              properties:
                Username: 
                  type: string
                  description: "a unique identifier of the user"
                  example: "Maria"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 16
        required: true
      responses:
        '201':
          description: "User log-in action successful"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionStruct"
                    
  /user:
    put:
      tags: ["User Management"]
      summary: Set Username
      description: "Sets the username of the user"
      operationId: setMyUserName
      requestBody:
        description: "User details"
        content:
          application/json:
            schema:
              description: "The new Username"
              type: object
              properties:
                NewUsername: 
                  type: string
                  description: "a unique identifier of the user"
                  example: "Maria"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 16
        required: true
      responses:
        "200":
          description: "Username updated successfully"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"
        "404": 
          description: "Error setting username!"
          
  /user/profilePicture:
    put:
      tags: ["User Management"]
      summary: Set Profile Picture
      description: "Sets the profile picture of the user"
      operationId: setMyPhoto
      requestBody:
        description: "User details"
        content:
          application/json:
            schema:
              description: "The profile picture"
              type: object
              properties:
                ProfilePicture:
                  description: "the profile picture of the user"
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 10000
        required: true
      responses:
        "200":
            description: Profile Picture updated successfully
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/User"
        "404": 
          description: "Error setting profile picture!"
        
  /user/myConversations:
    get:
      tags: ["Conversation Management"]
      summary: get all of my conversations
      description: "Get all the conversations of the user"
      operationId: getMyConversations
      responses:
        "200":
          description: "My conversations were fetched successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Conversation"
        "404":
           description: "Conversations not found"
          
  /conversation/{ConversationID}:
    parameters:
      - $ref: "#/components/parameters/ConversationID"
    get:
      tags: ["Conversation Management"]
      summary: get the selected conversation
      description: "Get the selected conversations"
      operationId: getConversation
      responses:
        "200":
          description: "The selected conversation was fetched successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: "Conversation not found"
    post:
      tags: ["Conversation Management"]
      summary: send a message to the conversation
      description: "The user sends a message to the conversation"
      operationId: sendMessage
      requestBody:
        description: "The message to send to the conversation"
        content:
          application/json:
            schema:
              description: "The content of the message"
              type: object
              properties:
                MessageContent:
                  type: string
                  description: "the content of the message"
                  example: "Maria"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 10000
        required: true
      responses:
        "200":
          description: "The message to the conversation was sent successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: "Conversation not found"
    put:
      tags: ["Conversation Management"]
      summary: set the group name
      description: "Set the group name"
      operationId: setGroupName
      requestBody:
        description: "Group Details"
        content:
          application/json:
            schema:
              description: "The new GroupName"
              type: object
              properties:
                GroupName: 
                  type: string
                  description: "new name for the group"
                  example: "Maria"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 16
        required: true
      responses:
        "200":
          description: "Group Details set successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "403":
          description: "Forbidden request, cannot set group name of one-on-one conversation"
        "404":
          description: "Conversation not found"
          
    delete:
      tags: ["Conversation Management"]
      summary: leave group
      description: "Leave from the group"
      operationId: leaveGroup
      responses:
        "200":
          description: "Left from the group successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: "Conversation not found"
   
  /conversation/{ConversationID}/add:
    parameters:
      - $ref: "#/components/parameters/ConversationID"
    put:
      tags: ["Conversation Management"]
      summary: Add Someone To Group
      description: "Add the specified user to the group"
      operationId: addToGroup
      requestBody:
        description: "User to Add"
        content:
          application/json:
            schema:
              description: "The user to add to the group"
              type: object
              properties:
                UserIDToAdd: 
                  type: integer
                  description: "UserID to add to the group"
        required: true
      responses:
        "200":
          description: "User has been added to the Group successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: "Conversation not found"
   
  /conversation/{ConversationID}/message/{MessageID}:
    parameters:
      - $ref: "#/components/parameters/ConversationID"
      - $ref: "#/components/parameters/MessageID"
    delete:
      tags: ["Message Management"]
      summary: delete message
      description: "delete the message from the conversation"
      operationId: deleteMessage
      responses:
        "200":
          description: "Message deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "404":
           description: "Conversation or Message not found"
  
  /conversation/{ConversationID}/message/{MessageID}/comment:
    parameters:
      - $ref: "#/components/parameters/ConversationID"
      - $ref: "#/components/parameters/MessageID"
    post:
      tags: ["Message Management"]
      summary: Forward a Message
      description: "Forward the message to someone"
      operationId: forwardMessage
      requestBody:
        description: "Forward The Message"
        content:
          application/json:
            schema:
              description: "The recipient Username"
              type: object
              properties:
                ForwardToConvID:
                  description: "The conversationID to forward the message to."
                  type: integer
      responses:
        "200":
            description: "Message forwarded successfully"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Message"
        "404": 
          description: "Conversation or Message not found"
    put:
      tags: ["Message Management"]
      summary: React to Message
      description: "Send a reaction or comment to a message"
      operationId: commentMessage
      requestBody:
        description: "Comment The Message"
        content:
          application/json:
            schema:
              description: "The type of reaction and the content of the reaction"
              type: object
              properties:
                TypeOfReaction:
                  description: "the type of reaction, can be either emoji or message"
                  type: string
                  enum:
                    - Emoji
                    - Message
                  example: "Emoji"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 7
                ContentOfReaction: 
                  type: string
                  description: "The content of the reaction; if the reaction is a message |
                                this is a reply and so the content is the message content; |
                                If the reaction is an emoji, this is the encoding of the emoji"
                  example: "Maria"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 10000
        required: true
      responses:
        "200":
            description: "Message reaction sent successfully"
            content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/Message"
        "404": 
          description: "Conversation or Message not found"
    delete:
      tags: ["Message Management"]
      summary: uncomment message
      description: "delete the comment or reaction from the message"
      operationId: uncommentMessage
      responses:
        "200":
          description: "Message reaction deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
           description: "Conversation or Message not found"
  
  
  /conversation/{ConversationID}/groupPicture:
    parameters:
      - $ref: "#/components/parameters/ConversationID"
    put:
      tags: ["Conversation Management"]
      summary: set the picture of the group
      description: "Set the picture of the group"
      operationId: setGroupPhoto
      requestBody:
        description: "Group Picture"
        content:
          application/json:
            schema:
              description: "The group picture in binary format"
              type: object
              properties:
                GroupPicture:
                  description: "the group picture"
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 100000
        required: true
      responses:
        "200":
          description: "The group picture was set successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "403":
          description: "Forbidden request, cannot set picture of one-on-one conversation"
        "404":
           description: "Conversation not found"
           
  /create/conversation:
    post:
      tags: ["Conversation Management"]
      summary: create a new conversation
      description: "creates either a one-on-one conversation or a group conversation"
      operationId: createConversation
      requestBody:
        description: "Details of conversation to create"
        content:
          application/json:
            schema:
              description: "The type of conversation and the participants"
              properties:
                ConversationType:
                  description: "type of conversation, either with a single person or a group"
                  type: string
                  enum:
                    - User
                    - Group
                  example: "User"
                  pattern: "^.*$"
                  minLength: 1
                  maxLength: 5
                Participants:
                  description: "users to create the conversation with"
                  type: array
                  items: 
                    description: "a list of userIDs"
                    type: integer
                  minItems: 1
                  maxItems: 1000
                ConversationName:
                  type: string
                  description: "the name of the conversation"
                  example: "Maria"
                  pattern: "^.*$"
                  minLength: 0
                  maxLength: 16
                ConversationPicture:
                  type: string
                  description: "the picture of the conversation"
                  format: binary
                  minLength: 0
                  maxLength: 100000
                
        required: true
      responses:
        "200":
          description: "The conversation was created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "403":
           description: "Forbidden request, either you tried to create a one-on-one conversation with more multiple users at the same time, or this one-on-one conversation already exist."
    
components:
  schemas:
    User:
      description: "Object representing a User"
      type: object
      properties:
        ID:
          description: "a unique identifier of the user"
          type: integer
        Username:
          description: "unique username of the user"
          type: string
          example: "Maria"
          pattern: "^.*$"
          minLength: 1
          maxLength: 16
        Profile Picture:
          description: "the profile picture of the user"
          type: string
          format: binary
          minLength: 1
          maxLength: 100000
            
    Message:
      description: "Object representing a single message"
      type: object
      properties:
        Message ID:
          description: "message id that is unique in the scope of a conversation"
          type: integer
        Sender:
          description: "the user of the person who sent the message"
          allOf:
            - $ref: "#/components/schemas/User"
            - description: "the user of the person who sent the message"
        Content:
          description: "the content of the message"
          type: string
          example: "Maria"
          pattern: "^.*$"
          minLength: 1 #the message has to be at least one character
          maxLength: 2000 #limiting the max message length
        Timestamp:
          description: "the timestamp of the message"
          type: string
          format: date-time
          minLength: 1
          maxLength: 100
        Status:
          description: "the status of the message"
          type: string
          enum:
            - Single
            - Double
            - Username
          example: "Single"
          pattern: "^.*$"
          minLength: 1
          maxLength: 10000
        Reactions:
          description: "all reactions to this message"
          type: array
          items:
            $ref: "#/components/schemas/Reaction" 
          minItems: 0
          maxItems: 10000
        Origin Message ID:
          description: "message Id of the origin message"
          type: integer
        HasBeenDeleted:
          description: "flags if the message has been deleted or not"
          type: boolean
        WasForwarded:
          description: "flags if the message was forwarded or not"
          type: boolean
        ReadBy:
          description: "an array of user IDs who read the message"
          type: array
          items:
            type: integer
          minItems: 0
          maxItems: 1000

    Reaction:
      description: "Object representing a reaction to a message"
      type: object
      properties:
        UserWhoReacted:
          description: "The user who made the reaction"
          type: integer
        ReactionType:
          description: "the type of reaction, can be either emoji or message"
          type: string
          enum:
            - Emoji
            - Message
          example: "Emoji"
          pattern: "^.*$"
          minLength: 1
          maxLength: 10000
        Content:
          description: "the content of reaction, can be either a message or the encoding of an emoji"
          type: string
          example: "Maria"
          pattern: "^.*$"
          minLength: 1
          maxLength: 10000
          
    Conversation:
      description: "Object representing a conversation"
      type: object
      properties:
        id:
          description: "identifier of a conversation, which is either
            the unique username of the other person or
            the unique Group ID of the group"
          type: string
          example: "Maria"
          pattern: "^.*$"
          minLength: 1
          maxLength: 10000
        Participants:
          description: "users in the group"
          type: array
          items: 
            type: integer
          minItems: 2
          maxItems: 10000
        Group name:
          description: "name of the group"
          type: string
          example: "Maria"
          pattern: "^.*$"
          minLength: 1
          maxLength: 20
        Group Picture:
          description: "the picture of the group"
          type: string
          format: binary
          minLength: 1
          maxLength: 100000
        ConversationType:
          description: "type of conversation, either with a single person or a group"
          type: string
          enum:
            - User
            - Group
          example: "User"
          pattern: "^.*$"
          minLength: 1
          maxLength: 5
        Messages:
          description: "content of the conversation -> a list of messages"
          type: array
          items: 
            $ref: "#/components/schemas/Message"
          minItems: 1
          maxItems: 10000
          
    SessionStruct:
      description: "Object representing session info to be communicated to the logged in user"
      type: object
      properties:
        User:
          description: "the user who was authenticated and logged in"
          allOf:
            - $ref: "#/components/schemas/User"
            - description: "the user who was authenticated and logged in"
        SessionToken:
          description: "the token of the user"
          type: string
          example: "Maria"
          pattern: "^.*$"
          minLength: 1
          maxLength: 20

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      description: "Bearer authentication"
      type: http
      scheme: bearer
  
  parameters:
    ConversationID:
      description: "Unique ID for the conversation"
      schema:
        description: "Unique ID for the conversation"
        type: string
        example: "Maria"
        pattern: "^.*$"
        minLength: 1
        maxLength: 10000
        readOnly: true
      name: ConversationID
      in: path
      required: true
    MessageID:
      description: "Message ID that is unique in the scope of a conversation"
      schema:
        description: "Message ID that is unique in the scope of a conversation"
        type: integer
        readOnly: true
      name: MessageID
      in: path
      required: true
      
security:
  - bearerAuth: []
                      